import asyncio
import random
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from config import BOT_TOKEN
from database import init_db, add_track, get_all_tracks, get_mode, set_mode

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


# üîπ –ü—ñ–¥ —á–∞—Å –∑–∞–ø—É—Å–∫—É ‚Äî —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏
@dp.startup()
async def on_startup():
    await init_db()
    print("‚úÖ –ë–∞–∑—É –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")


# üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–∫—É
@dp.message(F.audio)
async def upload_audio(message: types.Message):
    audio = message.audio
    title = audio.title or audio.file_name or "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç—Ä–µ–∫"
    file_id = audio.file_id

    await add_track(title, file_id)
    await message.answer(f"üé∂ –¢—Ä–µ–∫ **{title}** –¥–æ–¥–∞–Ω–æ –¥–æ –ø–ª–µ–π–ª—ñ—Å—Ç—É!")


# ‚öôÔ∏è –ö–æ–º–∞–Ω–¥–∞ /mode ‚Äî –∑–º—ñ–Ω–∏—Ç–∏ —Ä–µ–∂–∏–º –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
@dp.message(Command("mode"))
async def change_mode(message: types.Message):
    buttons = [
        [types.InlineKeyboardButton(text="üîÅ –ü—ñ–¥—Ä—è–¥", callback_data="mode:sequential")],
        [types.InlineKeyboardButton(text="üîÄ –í–∏–ø–∞–¥–∫–æ–≤–æ", callback_data="mode:shuffle")],
        [types.InlineKeyboardButton(text="üîÇ –û–¥–∏–Ω —Ç—Ä–µ–∫", callback_data="mode:single")],
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    mode = await get_mode()
    await message.answer(f"–ü–æ—Ç–æ—á–Ω–∏–π —Ä–µ–∂–∏–º: **{mode}**", reply_markup=keyboard)


# üîò –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ä–µ–∂–∏–º—É
@dp.callback_query(F.data.startswith("mode:"))
async def select_mode(callback: types.CallbackQuery):
    mode = callback.data.split(":")[1]
    await set_mode(mode)
    await callback.answer(f"–†–µ–∂–∏–º –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {mode}")
    await callback.message.edit_text(f"‚úÖ –†–µ–∂–∏–º –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {mode}")


# ‚ñ∂Ô∏è –ö–æ–º–∞–Ω–¥–∞ /play ‚Äî –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ä–µ–∂–∏–º—É
@dp.message(Command("play"))
async def play_tracks(message: types.Message):
    tracks = await get_all_tracks()
    mode = await get_mode()
    print(f"[DEBUG] –†–µ–∂–∏–º: {mode}, —Ç—Ä–µ–∫—ñ–≤: {len(tracks)}")

    if not tracks:
        await message.answer("‚ùå –£ –ø–ª–µ–π–ª—ñ—Å—Ç—ñ —â–µ –Ω–µ–º–∞—î —Ç—Ä–µ–∫—ñ–≤.")
        return

    # –†–µ–∂–∏–º "–≤–∏–ø–∞–¥–∫–æ–≤–æ"
    if mode == "shuffle":
        random.shuffle(tracks)

    # –†–µ–∂–∏–º "–æ–¥–∏–Ω —Ç—Ä–µ–∫"
    if mode == "single":
        track = random.choice(tracks)
        await message.answer_audio(track[2], caption=f"üîÇ {track[1]}")
        return

    # –†–µ–∂–∏–º "–ø—ñ–¥—Ä—è–¥"
    await message.answer(f"üéß –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è {len(tracks)} —Ç—Ä–µ–∫(—ñ–≤):")
    for track_id, title, file_id in tracks:
        try:
            await message.answer_audio(file_id, caption=f"üéµ {title}")
            await asyncio.sleep(1)
        except Exception as e:
            print(f"[ERROR] –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ {title}: {e}")

    await message.answer("‚úÖ –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")


# üü¢ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("üéµ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
