import asyncio
import random
import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import BOT_TOKEN
from database import init_db

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∂–∏–º—É –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
play_modes = {}  # {user_id: "all"|"random"|"repeat"}
playing_tasks = {}  # –¥–ª—è —Ä–µ–∂–∏–º—É repeat


@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    text = (
        "üéß –ü—Ä–∏–≤—ñ—Ç! –Ø –º—É–∑–∏—á–Ω–∏–π –±–æ—Ç.\n\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "/upload ‚Äì –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç—Ä–µ–∫\n"
        "/play ‚Äì –≤—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ —Ç—Ä–µ–∫–∏\n"
        "/mode ‚Äì –∑–º—ñ–Ω–∏—Ç–∏ —Ä–µ–∂–∏–º –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è\n"
        "/stop ‚Äì –∑—É–ø–∏–Ω–∏—Ç–∏ –ø–æ–≤—Ç–æ—Ä\n\n"
        "–†–µ–∂–∏–º–∏:\nüîÅ –ü—ñ–¥—Ä—è–¥ —É—Å—ñ\nüîÄ –í–∏–ø–∞–¥–∫–æ–≤–æ\nüîÇ –û–¥–∏–Ω —Ç—Ä–µ–∫"
    )
    await message.answer(text)


@dp.message(Command("upload"))
async def upload_cmd(message: types.Message):
    await message.answer("üì§ –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –∞—É–¥—ñ–æ—Ñ–∞–π–ª, —â–æ–± —è –¥–æ–¥–∞–≤ –π–æ–≥–æ –¥–æ –ø–ª–µ–π–ª—ñ—Å—Ç—É.")


@dp.message(lambda msg: msg.audio)
async def handle_audio(message: types.Message):
    file_id = message.audio.file_id
    title = message.audio.title or "–ë–µ–∑ –Ω–∞–∑–≤–∏"

    async with aiosqlite.connect("music.db") as db:
        await db.execute(
            "INSERT INTO tracks (playlist_id, title, file_id) VALUES (1, ?, ?)",
            (title, file_id)
        )
        await db.commit()

    await message.answer(f"‚úÖ –¢—Ä–µ–∫ **{title}** –¥–æ–¥–∞–Ω–æ –¥–æ –ø–ª–µ–π–ª—ñ—Å—Ç—É!")


@dp.message(Command("mode"))
async def mode_cmd(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÅ –ü—ñ–¥—Ä—è–¥", callback_data="mode_all")],
        [InlineKeyboardButton(text="üîÄ –í–∏–ø–∞–¥–∫–æ–≤–æ", callback_data="mode_random")],
        [InlineKeyboardButton(text="üîÇ –û–¥–∏–Ω —Ç—Ä–µ–∫", callback_data="mode_repeat")]
    ])
    await message.answer("üéö –û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è:", reply_markup=keyboard)


@dp.callback_query(lambda c: c.data and c.data.startswith("mode_"))
async def set_mode(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    mode = callback.data.split("_")[1]
    play_modes[user_id] = mode

    mode_text = {
        "all": "üîÅ –ü—ñ–¥—Ä—è–¥",
        "random": "üîÄ –í–∏–ø–∞–¥–∫–æ–≤–æ",
        "repeat": "üîÇ –û–¥–∏–Ω —Ç—Ä–µ–∫"
    }[mode]

    await callback.message.edit_text(f"‚úÖ –†–µ–∂–∏–º –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {mode_text}")
    await callback.answer()


@dp.message(Command("play"))
async def play_cmd(message: types.Message):
    user_id = message.from_user.id
    mode = play_modes.get(user_id, "all")

    async with aiosqlite.connect("music.db") as db:
        async with db.execute("SELECT title, file_id FROM tracks") as cursor:
            tracks = await cursor.fetchall()

    if not tracks:
        await message.answer("üò¢ –ù–µ–º–∞—î —Ç—Ä–µ–∫—ñ–≤ –¥–ª—è –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è.")
        return

    # –ó—É–ø–∏–Ω—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–æ–≤—Ç–æ—Ä
    if user_id in playing_tasks:
        playing_tasks[user_id].cancel()
        del playing_tasks[user_id]

    # üîÅ –ü—ñ–¥—Ä—è–¥
    if mode == "all":
        await message.answer("‚ñ∂Ô∏è –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç—Ä–µ–∫—ñ–≤ –ø—ñ–¥—Ä—è–¥...")
        for title, file_id in tracks:
            await message.answer_audio(audio=file_id, caption=f"üéµ {title}")
            await asyncio.sleep(1)

    # üîÄ –í–∏–ø–∞–¥–∫–æ–≤–æ
    elif mode == "random":
        await message.answer("üé≤ –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è —É –≤–∏–ø–∞–¥–∫–æ–≤–æ–º—É –ø–æ—Ä—è–¥–∫—É...")
        random.shuffle(tracks)
        for title, file_id in tracks:
            await message.answer_audio(audio=file_id, caption=f"üé∂ {title}")
            await asyncio.sleep(1)

    # üîÇ –û–¥–∏–Ω —Ç—Ä–µ–∫ (–ø–æ–≤—Ç–æ—Ä)
    elif mode == "repeat":
        await message.answer("üîÇ –ü–æ–≤—Ç–æ—Ä –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç—Ä–µ–∫—É... –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /stop —â–æ–± –∑—É–ø–∏–Ω–∏—Ç–∏.")
        title, file_id = tracks[0]

        async def repeat_track():
            try:
                while True:
                    await message.answer_audio(audio=file_id, caption=f"üéß {title} (–ø–æ–≤—Ç–æ—Ä)")
                    await asyncio.sleep(5)
            except asyncio.CancelledError:
                pass

        task = asyncio.create_task(repeat_track())
        playing_tasks[user_id] = task


@dp.message(Command("stop"))
async def stop_cmd(message: types.Message):
    user_id = message.from_user.id
    task = playing_tasks.get(user_id)
    if task:
        task.cancel()
        del playing_tasks[user_id]
        await message.answer("‚èπÔ∏è –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ.")
    else:
        await message.answer("‚ùå –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è.")


async def main():
    await init_db()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
