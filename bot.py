import asyncio
import random
import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from config import BOT_TOKEN

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

DB_PATH = "db/music.db"

# ================== –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ ==================
async def init_db():
    import os
    os.makedirs("db", exist_ok=True)
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
        CREATE TABLE IF NOT EXISTS tracks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            title TEXT,
            file_id TEXT,
            playlist TEXT
        )
        """)
        await db.execute("""
        CREATE TABLE IF NOT EXISTS playlists (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            name TEXT
        )
        """)
        await db.execute("""
        CREATE TABLE IF NOT EXISTS user_state (
            user_id INTEGER PRIMARY KEY,
            current_playlist TEXT
        )
        """)
        await db.commit()

# ================== –†–µ–∂–∏–º–∏ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è ==================
play_modes = {
    "sequential": "‚ñ∂Ô∏è –ü—ñ–¥—Ä—è–¥ —É—Å—ñ",
    "shuffle": "üîÄ –í–∏–ø–∞–¥–∫–æ–≤–æ",
    "repeat_one": "üîÇ –ü–æ–≤—Ç–æ—Ä –ø–æ—Ç–æ—á–Ω–æ–≥–æ"
}
user_modes = {}  # –∑–±–µ—Ä—ñ–≥–∞—î —Ä–µ–∂–∏–º –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

# ================== –°—Ç–∞—Ä—Ç ==================
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    user_id = message.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–ª–µ–π–ª—ñ—Å—Ç–∞, —è–∫—â–æ –Ω–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        await db.execute("INSERT OR IGNORE INTO playlists (user_id, name) VALUES (?, ?)", (user_id, "default"))
        await db.execute("INSERT OR IGNORE INTO user_state (user_id, current_playlist) VALUES (?, ?)", (user_id, "default"))
        await db.commit()
    await message.answer(
        "üéß –ü—Ä–∏–≤—ñ—Ç! –ú—É–∑–∏—á–Ω–∏–π –±–æ—Ç –Ω–∞ aiogram.\n\n"
        "üìÇ –ö–æ–º–∞–Ω–¥–∏:\n"
        "/createplaylist ‚Äî —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –ø–ª–µ–π–ª—ñ—Å—Ç\n"
        "/chooseplaylist ‚Äî –≤–∏–±—ñ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–µ–π–ª—ñ—Å—Ç–∞\n"
        "/myplaylists ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤–æ—ó –ø–ª–µ–π–ª—ñ—Å—Ç–∏\n"
        "/play ‚Äî –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–ª–µ–π–ª—ñ—Å—Ç–∞\n"
        "/mode ‚Äî –∑–º—ñ–Ω–∏—Ç–∏ —Ä–µ–∂–∏–º –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è\n"
        "–ù–∞–¥—ñ—à–ª–∏ –∞—É–¥—ñ–æ ‚Äî —â–æ–± –¥–æ–¥–∞—Ç–∏ –π–æ–≥–æ —É –ø–æ—Ç–æ—á–Ω–∏–π –ø–ª–µ–π–ª—ñ—Å—Ç."
    )

# ================== –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–µ–π–ª—ñ—Å—Ç–∞ ==================
@dp.message(Command("createplaylist"))
async def create_playlist(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª—ñ—Å—Ç–∞:")
    await dp.register_message_handler(save_playlist, state=None, content_types=types.ContentTypes.TEXT, lambda message: True)

async def save_playlist(message: types.Message):
    name = message.text.strip()
    user_id = message.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("INSERT INTO playlists (user_id, name) VALUES (?, ?)", (user_id, name))
        await db.execute("UPDATE user_state SET current_playlist=? WHERE user_id=?", (name, user_id))
        await db.commit()
    await message.answer(f"‚úÖ –ü–ª–µ–π–ª—ñ—Å—Ç '{name}' —Å—Ç–≤–æ—Ä–µ–Ω–æ —ñ –æ–±—Ä–∞–Ω–æ –∞–∫—Ç–∏–≤–Ω–∏–º.")

# ================== –ü–µ—Ä–µ–≥–ª—è–¥ –ø–ª–µ–π–ª—ñ—Å—Ç—ñ–≤ ==================
@dp.message(Command("myplaylists"))
async def my_playlists(message: types.Message):
    user_id = message.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT name FROM playlists WHERE user_id=?", (user_id,))
        playlists = [row[0] for row in await cursor.fetchall()]
        cursor = await db.execute("SELECT current_playlist FROM user_state WHERE user_id=?", (user_id,))
        current = (await cursor.fetchone())[0]

    if not playlists:
        await message.answer("‚ùå –£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î –ø–ª–µ–π–ª—ñ—Å—Ç—ñ–≤.")
        return
    text = "üé∂ –¢–≤–æ—ó –ø–ª–µ–π–ª—ñ—Å—Ç–∏:\n" + "\n".join([f"‚Ä¢ {p} {'(–∞–∫—Ç–∏–≤–Ω–∏–π)' if p==current else ''}" for p in playlists])
    await message.answer(text)

# ================== –í–∏–±—ñ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–µ–π–ª—ñ—Å—Ç–∞ ==================
@dp.message(Command("chooseplaylist"))
async def choose_playlist(message: types.Message):
    user_id = message.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT name FROM playlists WHERE user_id=?", (user_id,))
        playlists = [row[0] for row in await cursor.fetchall()]
    if not playlists:
        await message.answer("‚ùå –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –ø–ª–µ–π–ª—ñ—Å—Ç—ñ–≤.")
        return
    markup = types.InlineKeyboardMarkup()
    for name in playlists:
        markup.add(types.InlineKeyboardButton(name, callback_data=f"choose_{name}"))
    await message.answer("üéß –û–±–µ—Ä–∏ –ø–ª–µ–π–ª—ñ—Å—Ç:", reply_markup=markup)

@dp.callback_query(lambda call: call.data.startswith("choose_"))
async def set_playlist(call: types.CallbackQuery):
    name = call.data.replace("choose_", "")
    user_id = call.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE user_state SET current_playlist=? WHERE user_id=?", (name, user_id))
        await db.commit()
    await call.message.edit_text(f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π –ø–ª–µ–π–ª—ñ—Å—Ç –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {name}")

# ================== –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç—Ä–µ–∫—É ==================
@dp.message(lambda message: message.audio is not None)
async def handle_audio(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑_—ñ–º–µ–Ω—ñ"
    title = message.audio.title or message.audio.file_name or "–ë–µ–∑ –Ω–∞–∑–≤–∏"
    file_id = message.audio.file_id
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT current_playlist FROM user_state WHERE user_id=?", (user_id,))
        current_playlist = (await cursor.fetchone())[0]
        await db.execute("INSERT INTO tracks (user_id, username, title, file_id, playlist) VALUES (?, ?, ?, ?, ?)",
                         (user_id, username, title, file_id, current_playlist))
        await db.commit()
    await message.answer(f"‚úÖ –¢—Ä–µ–∫ '{title}' –¥–æ–¥–∞–Ω–æ —É –ø–ª–µ–π–ª—ñ—Å—Ç '{current_playlist}'.")

# ================== –ó–º—ñ–Ω–∞ —Ä–µ–∂–∏–º—É ==================
@dp.message(Command("mode"))
async def change_mode(message: types.Message):
    markup = types.InlineKeyboardMarkup()
    for key, name in play_modes.items():
        markup.add(types.InlineKeyboardButton(name, callback_data=f"mode_{key}"))
    await message.answer("üéõ –û–±–µ—Ä–∏ —Ä–µ–∂–∏–º –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è:", reply_markup=markup)

@dp.callback_query(lambda call: call.data.startswith("mode_"))
async def set_mode(call: types.CallbackQuery):
    user_modes[call.from_user.id] = call.data.replace("mode_", "")
    await call.message.edit_text(f"‚úÖ –†–µ–∂–∏–º –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {play_modes[user_modes[call.from_user.id]]}")

# ================== –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–µ–π–ª—ñ—Å—Ç–∞ ==================
@dp.message(Command("play"))
async def play_playlist(message: types.Message):
    user_id = message.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT current_playlist FROM user_state WHERE user_id=?", (user_id,))
        playlist = (await cursor.fetchone())[0]
        cursor = await db.execute("SELECT title, file_id FROM tracks WHERE user_id=? AND playlist=?", (user_id, playlist))
        tracks = await cursor.fetchall()

    if not tracks:
        await message.answer(f"‚ùå –£ –ø–ª–µ–π–ª—ñ—Å—Ç—ñ '{playlist}' –Ω–µ–º–∞—î —Ç—Ä–µ–∫—ñ–≤.")
        return

    await message.answer(f"üé∂ –í—ñ–¥—Ç–≤–æ—Ä—é—î–º–æ –ø–ª–µ–π–ª—ñ—Å—Ç: {playlist}")

    mode = user_modes.get(user_id, "sequential")
    if mode == "shuffle":
        random.shuffle(tracks)
    elif mode == "repeat_one":
        tracks = [tracks[0]]

    for title, file_id in tracks:
        await bot.send_audio(message.chat.id, file_id, caption=f"üéµ {title}")
        if mode == "repeat_one":
            break

# ================== –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ==================
async def main():
    await init_db()
    print("üéµ –ú—É–∑–∏—á–Ω–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
