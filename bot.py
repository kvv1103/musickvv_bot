import asyncio
import random
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
import aiosqlite
from config import BOT_TOKEN
from database import init_db, DB_NAME

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ü–∞–º‚Äô—è—Ç—å –¥–ª—è —Ä–µ–∂–∏–º—ñ–≤ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
user_play_modes = {}

# ==================== –ö–æ–º–∞–Ω–¥–∏ ====================

@dp.message(Command("start"))
async def start_cmd(message: Message):
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute(
            "INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)",
            (message.from_user.id, message.from_user.username)
        )
        await db.commit()
    await message.answer(
        "üé∂ –ü—Ä–∏–≤—ñ—Ç! –Ø –º—É–∑–∏—á–Ω–∏–π –±–æ—Ç.\n\n"
        "üìÄ –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –∞—É–¥—ñ–æ ‚Äî —è –∑–±–µ—Ä–µ–∂—É –π–æ–≥–æ —É —Ç–≤–æ—ó–π –±—ñ–±–ª—ñ–æ—Ç–µ—Ü—ñ.\n"
        "üéß –ö–æ–º–∞–Ω–¥–∏:\n"
        "/mytracks ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Ç–≤–æ—ó —Ç—Ä–µ–∫–∏\n"
        "/newplaylist <–Ω–∞–∑–≤–∞> ‚Äî —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–ª–µ–π–ª—ñ—Å—Ç\n"
        "/myplaylists ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–ª–µ–π–ª—ñ—Å—Ç–∏\n"
        "/addtoplaylist <id_–ø–ª–µ–π–ª—ñ—Å—Ç–∞> <id_—Ç—Ä–µ–∫—É> ‚Äî –¥–æ–¥–∞—Ç–∏ —Ç—Ä–µ–∫ –¥–æ –ø–ª–µ–π–ª—ñ—Å—Ç–∞\n\n"
        "–†–µ–∂–∏–º–∏ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è:\n"
        "/play <id> ‚Äî –∑–≤–∏—á–∞–π–Ω–µ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è\n"
        "/shuffle <id> ‚Äî –≤–∏–ø–∞–¥–∫–æ–≤–µ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è\n"
        "/loop <id_—Ç—Ä–µ–∫—É> ‚Äî –ø–æ–≤—Ç–æ—Ä –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–∫—É\n"
        "/stop ‚Äî –∑—É–ø–∏–Ω–∏—Ç–∏ –ø–æ–≤—Ç–æ—Ä"
    )

# ================================================

@dp.message(Command("mytracks"))
async def show_my_tracks(message: Message):
    async with aiosqlite.connect(DB_NAME) as db:
        cursor = await db.execute(
            "SELECT id, title FROM tracks WHERE user_id = ?",
            (message.from_user.id,)
        )
        rows = await cursor.fetchall()
    if not rows:
        await message.answer("–£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î —Ç—Ä–µ–∫—ñ–≤ üéµ")
        return
    text = "\n".join([f"{tid}. {title}" for tid, title in rows])
    await message.answer(f"üéß –¢–≤–æ—ó —Ç—Ä–µ–∫–∏:\n{text}")

# ================================================

@dp.message(Command("newplaylist"))
async def new_playlist(message: Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("–í–∫–∞–∂–∏ –Ω–∞–∑–≤—É –ø–ª–µ–π–ª—ñ—Å—Ç–∞: `/newplaylist –ú–æ—è –º—É–∑–∏–∫–∞`")
        return
    name = args[1]
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute(
            "INSERT INTO playlists (user_id, name) VALUES (?, ?)",
            (message.from_user.id, name)
        )
        await db.commit()
    await message.answer(f"‚úÖ –ü–ª–µ–π–ª—ñ—Å—Ç '{name}' —Å—Ç–≤–æ—Ä–µ–Ω–æ!")

# ================================================

@dp.message(Command("myplaylists"))
async def show_playlists(message: Message):
    async with aiosqlite.connect(DB_NAME) as db:
        cursor = await db.execute(
            "SELECT id, name FROM playlists WHERE user_id = ?",
            (message.from_user.id,)
        )
        playlists = await cursor.fetchall()
    if not playlists:
        await message.answer("–£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î –ø–ª–µ–π–ª—ñ—Å—Ç—ñ–≤ üé∂")
        return
    text = "\n".join([f"{pid}. {name}" for pid, name in playlists])
    await message.answer(f"üìÇ –¢–≤–æ—ó –ø–ª–µ–π–ª—ñ—Å—Ç–∏:\n{text}")

# ================================================

@dp.message(Command("addtoplaylist"))
async def add_to_playlist(message: Message):
    args = message.text.split()
    if len(args) < 3:
        await message.answer("–í–∫–∞–∂–∏: `/addtoplaylist <id_–ø–ª–µ–π–ª—ñ—Å—Ç–∞> <id_—Ç—Ä–µ–∫—É>`")
        return
    playlist_id, track_id = args[1], args[2]
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute(
            "INSERT INTO playlist_tracks (playlist_id, track_id) VALUES (?, ?)",
            (playlist_id, track_id)
        )
        await db.commit()
    await message.answer("‚úÖ –¢—Ä–µ–∫ –¥–æ–¥–∞–Ω–æ –¥–æ –ø–ª–µ–π–ª—ñ—Å—Ç–∞!")

# ================================================

@dp.message(lambda msg: msg.audio is not None)
async def save_audio(message: Message):
    file_id = message.audio.file_id
    title = message.audio.title or message.audio.file_name or "–ë–µ–∑ –Ω–∞–∑–≤–∏"
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute(
            "INSERT INTO tracks (user_id, file_id, title) VALUES (?, ?, ?)",
            (message.from_user.id, file_id, title)
        )
        await db.commit()
    await message.answer(f"‚úÖ –¢—Ä–µ–∫ '{title}' –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")

# ================================================
# üéß –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–µ–∫—ñ–≤ –∑ –ø–ª–µ–π–ª—ñ—Å—Ç–∞
# ================================================

@dp.message(Command("play"))
async def play_playlist(message: types.Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("–í–∫–∞–∂–∏ ID –ø–ª–µ–π–ª—ñ—Å—Ç–∞: `/play 1`")
        return
    playlist_id = args[1]

    async with aiosqlite.connect(DB_NAME) as db:
        cursor = await db.execute("""
            SELECT tracks.file_id, tracks.title
            FROM playlist_tracks
            JOIN tracks ON playlist_tracks.track_id = tracks.id
            WHERE playlist_tracks.playlist_id = ?
        """, (playlist_id,))
        tracks = await cursor.fetchall()

    if not tracks:
        await message.answer("‚ùå –£ —Ü—å–æ–º—É –ø–ª–µ–π–ª—ñ—Å—Ç—ñ –Ω–µ–º–∞—î —Ç—Ä–µ–∫—ñ–≤.")
        return

    user_play_modes[message.from_user.id] = "normal"
    await message.answer("‚ñ∂Ô∏è –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—ñ–¥—Ä—è–¥...")

    for file_id, title in tracks:
        await message.answer_audio(audio=file_id, caption=title)

# ================================================

@dp.message(Command("shuffle"))
async def shuffle_playlist(message: types.Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("–í–∫–∞–∂–∏ ID –ø–ª–µ–π–ª—ñ—Å—Ç–∞: `/shuffle 1`")
        return
    playlist_id = args[1]

    async with aiosqlite.connect(DB_NAME) as db:
        cursor = await db.execute("""
            SELECT tracks.file_id, tracks.title
            FROM playlist_tracks
            JOIN tracks ON playlist_tracks.track_id = tracks.id
            WHERE playlist_tracks.playlist_id = ?
        """, (playlist_id,))
        tracks = await cursor.fetchall()

    if not tracks:
        await message.answer("‚ùå –£ —Ü—å–æ–º—É –ø–ª–µ–π–ª—ñ—Å—Ç—ñ –Ω–µ–º–∞—î —Ç—Ä–µ–∫—ñ–≤.")
        return

    random.shuffle(tracks)
    user_play_modes[message.from_user.id] = "shuffle"
    await message.answer("üîÄ –í–∏–ø–∞–¥–∫–æ–≤–µ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è...")

    for file_id, title in tracks:
        await message.answer_audio(audio=file_id, caption=title)

# ================================================

@dp.message(Command("loop"))
async def loop_track(message: types.Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("–í–∫–∞–∂–∏ ID —Ç—Ä–µ–∫—É: `/loop 3`")
        return
    track_id = args[1]

    async with aiosqlite.connect(DB_NAME) as db:
        cursor = await db.execute("SELECT file_id, title FROM tracks WHERE id = ?", (track_id,))
        track = await cursor.fetchone()

    if not track:
        await message.answer("‚ùå –¢—Ä–µ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    file_id, title = track
    user_play_modes[message.from_user.id] = "loop"
    await message.answer(f"üîÅ –ü–æ–≤—Ç–æ—Ä—é—é —Ç—Ä–µ–∫ '{title}'. –ù–∞–ø–∏—à–∏ `/stop`, —â–æ–± –∑—É–ø–∏–Ω–∏—Ç–∏.")

    while user_play_modes.get(message.from_user.id) == "loop":
        await message.answer_audio(audio=file_id, caption=title)
        await asyncio.sleep(5)  # –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—Ç–æ—Ä–∞–º–∏

# ================================================

@dp.message(Command("stop"))
async def stop_loop(message: types.Message):
    user_play_modes[message.from_user.id] = "stopped"
    await message.answer("‚èπÔ∏è –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ.")

# ================================================

async def main():
    print("üéµ –ó–∞–ø—É—Å–∫ –º—É–∑–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞...")
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
