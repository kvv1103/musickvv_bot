import os
import sqlite3
import random
from telebot import TeleBot, types

# üîπ –¢–≤—ñ–π —Ç–æ–∫–µ–Ω
API_TOKEN = "–¢–í–û–ô_–ê–ü–Ü_–ö–õ–Æ–ß"
bot = TeleBot(API_TOKEN)

# üîπ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
os.makedirs("db", exist_ok=True)
conn = sqlite3.connect("db/music.db", check_same_thread=False)
cur = conn.cursor()

# üîπ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å, —è–∫—â–æ —â–µ –Ω–µ–º–∞—î
cur.execute("""
CREATE TABLE IF NOT EXISTS tracks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    username TEXT,
    title TEXT,
    file_id TEXT,
    playlist TEXT
)
""")

cur.execute("""
CREATE TABLE IF NOT EXISTS playlists (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    name TEXT
)
""")

cur.execute("""
CREATE TABLE IF NOT EXISTS user_state (
    user_id INTEGER PRIMARY KEY,
    current_playlist TEXT
)
""")

conn.commit()


# üîπ –ì–ª–æ–±–∞–ª—å–Ω—ñ —Ä–µ–∂–∏–º–∏ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
play_modes = {
    "sequential": "‚ñ∂Ô∏è –ü—ñ–¥—Ä—è–¥ —É—Å—ñ",
    "shuffle": "üîÄ –í–∏–ø–∞–¥–∫–æ–≤–æ",
    "repeat_one": "üîÇ –ü–æ–≤—Ç–æ—Ä –ø–æ—Ç–æ—á–Ω–æ–≥–æ"
}
current_mode = "sequential"


# üü¢ –°—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    bot.send_message(
        message.chat.id,
        "üéß –ü—Ä–∏–≤—ñ—Ç! –¶–µ –º—É–∑–∏—á–Ω–∏–π –±–æ—Ç.\n\n"
        "üìÇ –¢–∏ –º–æ–∂–µ—à:\n"
        "‚Ä¢ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç—Ä–µ–∫ ‚Äî —â–æ–± –¥–æ–¥–∞—Ç–∏ —É –ø–æ—Ç–æ—á–Ω–∏–π –ø–ª–µ–π–ª—ñ—Å—Ç\n"
        "‚Ä¢ –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π ‚Äî /createplaylist\n"
        "‚Ä¢ –ü–µ—Ä–µ–º–∫–Ω—É—Ç–∏—Å—å –Ω–∞ —ñ–Ω—à–∏–π ‚Äî /chooseplaylist\n"
        "‚Ä¢ –ü–æ–¥–∏–≤–∏—Ç–∏—Å—å —Å–≤–æ—ó –ø–ª–µ–π–ª—ñ—Å—Ç–∏ ‚Äî /myplaylists\n"
        "‚Ä¢ –°–ª—É—Ö–∞—Ç–∏ –º—É–∑–∏–∫—É ‚Äî /play\n"
        "‚Ä¢ –ó–º—ñ–Ω–∏—Ç–∏ —Ä–µ–∂–∏–º ‚Äî /mode"
    )

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —â–µ –Ω–µ –º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–µ–π–ª—ñ—Å—Ç—É ‚Äî —Å—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π
    cur.execute("SELECT current_playlist FROM user_state WHERE user_id=?", (user_id,))
    row = cur.fetchone()
    if not row:
        cur.execute("INSERT OR REPLACE INTO user_state (user_id, current_playlist) VALUES (?, ?)", (user_id, "default"))
        cur.execute("INSERT OR IGNORE INTO playlists (user_id, name) VALUES (?, ?)", (user_id, "default"))
        conn.commit()


# üü¢ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª—ñ—Å—Ç—É
@bot.message_handler(commands=['createplaylist'])
def create_playlist(message):
    bot.send_message(message.chat.id, "üéµ –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª—ñ—Å—Ç—É:")
    bot.register_next_step_handler(message, save_playlist)


def save_playlist(message):
    name = message.text.strip()
    user_id = message.from_user.id

    cur.execute("INSERT INTO playlists (user_id, name) VALUES (?, ?)", (user_id, name))
    cur.execute("UPDATE user_state SET current_playlist=? WHERE user_id=?", (name, user_id))
    conn.commit()

    bot.send_message(message.chat.id, f"‚úÖ –ü–ª–µ–π–ª—ñ—Å—Ç '{name}' —Å—Ç–≤–æ—Ä–µ–Ω–æ —ñ –æ–±—Ä–∞–Ω–æ –∞–∫—Ç–∏–≤–Ω–∏–º.")


# üü¢ –ü–µ—Ä–µ–≥–ª—è–¥ —Å–≤–æ—ó—Ö –ø–ª–µ–π–ª—ñ—Å—Ç—ñ–≤
@bot.message_handler(commands=['myplaylists'])
def my_playlists(message):
    user_id = message.from_user.id
    cur.execute("SELECT name FROM playlists WHERE user_id=?", (user_id,))
    playlists = [p[0] for p in cur.fetchall()]

    if not playlists:
        bot.send_message(message.chat.id, "‚ùå –£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î –ø–ª–µ–π–ª—ñ—Å—Ç—ñ–≤.")
        return

    cur.execute("SELECT current_playlist FROM user_state WHERE user_id=?", (user_id,))
    current = cur.fetchone()[0]

    text = "üé∂ –¢–≤–æ—ó –ø–ª–µ–π–ª—ñ—Å—Ç–∏:\n" + "\n".join(
        [f"‚Ä¢ {p} {'(–∞–∫—Ç–∏–≤–Ω–∏–π)' if p == current else ''}" for p in playlists]
    )
    bot.send_message(message.chat.id, text)


# üü¢ –í–∏–±—ñ—Ä –ø–ª–µ–π–ª—ñ—Å—Ç—É
@bot.message_handler(commands=['chooseplaylist'])
def choose_playlist(message):
    user_id = message.from_user.id
    cur.execute("SELECT name FROM playlists WHERE user_id=?", (user_id,))
    playlists = cur.fetchall()

    if not playlists:
        bot.send_message(message.chat.id, "‚ùå –£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î –ø–ª–µ–π–ª—ñ—Å—Ç—ñ–≤. –°—Ç–≤–æ—Ä–∏ –æ–¥–∏–Ω –∫–æ–º–∞–Ω–¥–æ—é /createplaylist.")
        return

    markup = types.InlineKeyboardMarkup()
    for (name,) in playlists:
        markup.add(types.InlineKeyboardButton(name, callback_data=f"choose_{name}"))
    bot.send_message(message.chat.id, "üéß –û–±–µ—Ä–∏ –ø–ª–µ–π–ª—ñ—Å—Ç:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("choose_"))
def set_playlist(call):
    name = call.data.replace("choose_", "")
    user_id = call.from_user.id
    cur.execute("UPDATE user_state SET current_playlist=? WHERE user_id=?", (name, user_id))
    conn.commit()
    bot.edit_message_text(f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π –ø–ª–µ–π–ª—ñ—Å—Ç –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {name}", call.message.chat.id, call.message.message_id)


# üü¢ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç—Ä–µ–∫—É
@bot.message_handler(content_types=['audio'])
def handle_audio(message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑_—ñ–º–µ–Ω—ñ"
    title = message.audio.title or message.audio.file_name or "–ë–µ–∑ –Ω–∞–∑–≤–∏"
    file_id = message.audio.file_id

    # –î–æ–¥–∞—î–º–æ —É –ø–æ—Ç–æ—á–Ω–∏–π –ø–ª–µ–π–ª—ñ—Å—Ç
    cur.execute("SELECT current_playlist FROM user_state WHERE user_id=?", (user_id,))
    current_playlist = cur.fetchone()[0]

    cur.execute("INSERT INTO tracks (user_id, username, title, file_id, playlist) VALUES (?, ?, ?, ?, ?)",
                (user_id, username, title, file_id, current_playlist))
    conn.commit()

    bot.send_message(message.chat.id, f"‚úÖ –¢—Ä–µ–∫ '{title}' –¥–æ–¥–∞–Ω–æ —É –ø–ª–µ–π–ª—ñ—Å—Ç '{current_playlist}'.")


# üü¢ –†–µ–∂–∏–º –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
@bot.message_handler(commands=['mode'])
def change_mode(message):
    markup = types.InlineKeyboardMarkup()
    for key, name in play_modes.items():
        markup.add(types.InlineKeyboardButton(name, callback_data=f"mode_{key}"))
    bot.send_message(message.chat.id, "üéõ –û–±–µ—Ä–∏ —Ä–µ–∂–∏–º –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("mode_"))
def set_mode(call):
    global current_mode
    current_mode = call.data.replace("mode_", "")
    bot.edit_message_text(f"‚úÖ –†–µ–∂–∏–º –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {play_modes[current_mode]}", call.message.chat.id, call.message.message_id)


# üü¢ –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
@bot.message_handler(commands=['play'])
def play_playlist(message):
    user_id = message.from_user.id
    cur.execute("SELECT current_playlist FROM user_state WHERE user_id=?", (user_id,))
    playlist = cur.fetchone()[0]

    cur.execute("SELECT title, file_id FROM tracks WHERE user_id=? AND playlist=?", (user_id, playlist))
    tracks = cur.fetchall()

    if not tracks:
        bot.send_message(message.chat.id, f"‚ùå –£ –ø–ª–µ–π–ª—ñ—Å—Ç—ñ '{playlist}' –Ω–µ–º–∞—î —Ç—Ä–µ–∫—ñ–≤.")
        return

    bot.send_message(message.chat.id, f"üé∂ –í—ñ–¥—Ç–≤–æ—Ä—é—î–º–æ –ø–ª–µ–π–ª—ñ—Å—Ç: {playlist}")

    if current_mode == "shuffle":
        random.shuffle(tracks)
    elif current_mode == "repeat_one":
        tracks = [tracks[0]]

    for title, file_id in tracks:
        bot.send_audio(message.chat.id, file_id, caption=f"üéµ {title}")
        if current_mode == "repeat_one":
            break


bot.polling(none_stop=True)
