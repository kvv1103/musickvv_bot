import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from config import BOT_TOKEN
from database import init_db, DB_NAME
import aiosqlite

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# ==================== –ö–æ–º–∞–Ω–¥–∏ ====================

@dp.message(Command("start"))
async def start_cmd(message: Message):
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute(
            "INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)",
            (message.from_user.id, message.from_user.username)
        )
        await db.commit()
    await message.answer(
        "üé∂ –ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –∞—É–¥—ñ–æ, —ñ —è –¥–æ–¥–∞–º –π–æ–≥–æ –¥–æ —Ç–≤–æ—ó—Ö —Ç—Ä–µ–∫—ñ–≤.\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "/mytracks ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Ç–≤–æ—ó —Ç—Ä–µ–∫–∏\n"
        "/newplaylist <–Ω–∞–∑–≤–∞> ‚Äî —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–ª–µ–π–ª—ñ—Å—Ç\n"
        "/myplaylists ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–ª–µ–π–ª—ñ—Å—Ç–∏"
    )

# ================================================

@dp.message(Command("mytracks"))
async def show_my_tracks(message: Message):
    async with aiosqlite.connect(DB_NAME) as db:
        cursor = await db.execute(
            "SELECT id, title FROM tracks WHERE user_id = ?",
            (message.from_user.id,)
        )
        rows = await cursor.fetchall()
    if not rows:
        await message.answer("–£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î —Ç—Ä–µ–∫—ñ–≤ üéµ")
        return
    text = "\n".join([f"{tid}. {title}" for tid, title in rows])
    await message.answer(f"üéß –¢–≤–æ—ó —Ç—Ä–µ–∫–∏:\n{text}")

# ================================================

@dp.message(Command("newplaylist"))
async def new_playlist(message: Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("–í–∫–∞–∂–∏ –Ω–∞–∑–≤—É –ø–ª–µ–π–ª—ñ—Å—Ç–∞: `/newplaylist –ú–æ—è –º—É–∑–∏–∫–∞`")
        return
    name = args[1]
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute(
            "INSERT INTO playlists (user_id, name) VALUES (?, ?)",
            (message.from_user.id, name)
        )
        await db.commit()
    await message.answer(f"‚úÖ –ü–ª–µ–π–ª—ñ—Å—Ç '{name}' —Å—Ç–≤–æ—Ä–µ–Ω–æ!")

# ================================================

@dp.message(Command("myplaylists"))
async def show_playlists(message: Message):
    async with aiosqlite.connect(DB_NAME) as db:
        cursor = await db.execute(
            "SELECT id, name FROM playlists WHERE user_id = ?",
            (message.from_user.id,)
        )
        playlists = await cursor.fetchall()
    if not playlists:
        await message.answer("–£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î –ø–ª–µ–π–ª—ñ—Å—Ç—ñ–≤ üé∂")
        return
    text = "\n".join([f"{pid}. {name}" for pid, name in playlists])
    await message.answer(f"üìÇ –¢–≤–æ—ó –ø–ª–µ–π–ª—ñ—Å—Ç–∏:\n{text}")

# ================================================

@dp.message(lambda msg: msg.audio is not None)
async def save_audio(message: Message):
    file_id = message.audio.file_id
    title = message.audio.title or message.audio.file_name or "–ë–µ–∑ –Ω–∞–∑–≤–∏"

    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute(
            "INSERT INTO tracks (user_id, file_id, title) VALUES (?, ?, ?)",
            (message.from_user.id, file_id, title)
        )
        await db.commit()

    await message.answer(f"‚úÖ –¢—Ä–µ–∫ '{title}' –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")

# ================================================

async def main():
    print("–ó–∞–ø—É—Å–∫ 24/7 –º—É–∑–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞ üéµ")
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
